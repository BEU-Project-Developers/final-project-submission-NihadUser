<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>